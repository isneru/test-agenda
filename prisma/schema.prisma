// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model Test {
    id          String   @id
    customerId  String   @default("")
    description String   @default("")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    scheduledFor DateTime?
    type         String    @default("Normal") // 'Normal', 'FPS', `Drop n' Go`
    beingTested  Boolean   @default(false)
    user         User?     @relation(fields: [userId], references: [id])
    userId       String?

    @@index([userId])
}

model Warranty {
    id          String   @id
    customerId  String   @default("")
    description String   @default("")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    warrantyRequestId String?
    status            String  @default("Em Análise") // 'Substituir', 'Em Análise', 'Reembolsar'
    user              User?   @relation(fields: [userId], references: [id])
    userId            String?

    @@index([userId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    tests      Test[]
    warranties Warranty[]

    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
